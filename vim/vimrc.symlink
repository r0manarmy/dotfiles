set nocompatible
filetype off

call plug#begin()

Plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
Plug 'vim-scripts/genutils'
Plug 'vim-scripts/SelectBuf'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/ctags.vim'
Plug 'vim-scripts/tComment'
Plug 'danro/rename.vim'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-endwise'

" ruby
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'tpope/vim-rails'

" go
Plug 'fatih/vim-go'

" rust
Plug 'rust-lang/rust.vim'

" git
Plug 'tpope/vim-fugitive'
Plug 'int3/vim-extradite'

" colors

call plug#end()

set relativenumber
set number
set backspace=indent,eol,start  " Allow backspace in insert mode
set incsearch                   " show search matches as you type
set smartcase                   " ignore case if search pattern is all lowercase
set hlsearch                    " highlight search terms
set gcr=a:blinkon0              " Disable cursor blink
set encoding=utf-8              " Necessary to show Unicode glyphs
set laststatus=2                " Always display the statusline in all windows
set noshowmode                  " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noswapfile
set hidden
set foldmethod=syntax
set nofoldenable
set linebreak                   " line breaks on word boundary
syntax on
set background=dark

set tabstop=2
set shiftwidth=2
set expandtab

let mapleader = " "

" bind K to grep word under cursor
nnoremap K :Ag<CR>

let g:airline_powerline_fonts = 1

function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = ' ' " matchstr(&fillchars, 'fold:\zs.')
  let left_padding = (v:foldlevel - 1) * &tabstop - 1
  let foldtextstart = strpart(repeat(foldchar, left_padding) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
nnoremap <C-m><C-m> za
nnoremap <C-m><C-o> zo

set list listchars=tab:»·,trail:·

imap <C-v> <C-r>*
nmap <leader>l :nohlsearch<CR>
nmap <leader>w :w<CR>
nmap <unique> <silent> <Leader>b <Plug>SelectBuf

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

let g:html_indent_tags = 'li\|p'

let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

let g:rustfmt_autosave = 1

augroup ft_go
  au!

  au Filetype go setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
  au Filetype go setlocal listchars+=tab:\ \ 
augroup END

filetype plugin indent on
